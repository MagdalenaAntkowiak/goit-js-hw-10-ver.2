{"version":3,"file":"commonHelpers.js","sources":["../src/js/01-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('button[data-start]');\n\nlet userSelectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate <= new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Illegal operation',\n        position: 'topRight',\n        backgroundColor: '#b51b1b',\n        titleColor: '#ffffff',\n        messageColor: '#ffffff',\n        iconColor: '#fafafb',\n        timeout: 5000,\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (userSelectedDate) {\n    startButton.disabled = true;\n    // Rozpocznij odliczanie\n    const countdownInterval = setInterval(() => {\n      const now = new Date();\n      const timeDifference = userSelectedDate - now;\n      if (timeDifference <= 0) {\n        clearInterval(countdownInterval);\n        return;\n      }\n      const time = convertMs(timeDifference);\n      updateTimer(time);\n    }, 1000);\n  }\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimer({ days, hours, minutes, seconds }) {\n  document.querySelector('span[data-days]').textContent = days\n    .toString()\n    .padStart(2, '0');\n  document.querySelector('span[data-hours]').textContent = hours\n    .toString()\n    .padStart(2, '0');\n  document.querySelector('span[data-minutes]').textContent = minutes\n    .toString()\n    .padStart(2, '0');\n  document.querySelector('span[data-seconds]').textContent = seconds\n    .toString()\n    .padStart(2, '0');\n}\n"],"names":["datetimePicker","startButton","userSelectedDate","options","selectedDates","iziToast","flatpickr","countdownInterval","timeDifference","time","convertMs","updateTimer","ms","days","hours","minutes","seconds"],"mappings":"2GAKA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,oBAAoB,EAE/D,IAAIC,EAAmB,KAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAmBE,EAAc,CAAC,EAC9BF,GAAoB,IAAI,MAC1BG,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oBACT,SAAU,WACV,gBAAiB,UACjB,WAAY,UACZ,aAAc,UACd,UAAW,UACX,QAAS,GACjB,CAAO,EACDJ,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAK,EAAUN,EAAgBG,CAAO,EAEjCF,EAAY,iBAAiB,QAAS,IAAM,CAC1C,GAAIC,EAAkB,CACpBD,EAAY,SAAW,GAEvB,MAAMM,EAAoB,YAAY,IAAM,CAE1C,MAAMC,EAAiBN,EADX,IAAI,KAEhB,GAAIM,GAAkB,EAAG,CACvB,cAAcD,CAAiB,EAC/B,MACD,CACD,MAAME,EAAOC,EAAUF,CAAc,EACrCG,EAAYF,CAAI,CACjB,EAAE,GAAI,CACR,CACH,CAAC,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAY,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACtD,SAAS,cAAc,iBAAiB,EAAE,YAAcH,EACrD,SAAU,EACV,SAAS,EAAG,GAAG,EAClB,SAAS,cAAc,kBAAkB,EAAE,YAAcC,EACtD,SAAU,EACV,SAAS,EAAG,GAAG,EAClB,SAAS,cAAc,oBAAoB,EAAE,YAAcC,EACxD,SAAU,EACV,SAAS,EAAG,GAAG,EAClB,SAAS,cAAc,oBAAoB,EAAE,YAAcC,EACxD,SAAU,EACV,SAAS,EAAG,GAAG,CACpB"}